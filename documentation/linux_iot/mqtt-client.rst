一个高性能的开源mqtt客户端
==========================

在github上有很多开源的项目，比如本章要介绍的这个MQTT客户端，它是 **一个高性能、高稳定性的跨平台MQTT客户端** ，项目地址是：https://github.com/jiejieTop/mqttclient。

mqttclient简介
--------------

一个高性能、高稳定性的跨平台MQTT客户端，基于socket
API之上开发，可以在嵌入式设备（FreeRTOS/LiteOS/RT-Thread/TencentOS
tiny）、Linux、Windows、Mac上使用，拥有非常简洁的API接口，以极少的资源实现QOS2的服务质量，并且无缝衔接了mbedtls加密库。

mqttclient的优势：
------------------

-  **基于标准BSD socket之上开发** ，只要是兼容BSD
   socket的系统均可使用。

-  **稳定** ：无论是 **掉线重连** ， **丢包重发** ，都是 **严格遵循MQTT协议标准** 执行，除此之外对 **大数据量** 的测试无论是收是发，都是非常稳定，高频测试也是非常稳定。因为作者以极少的资源设计了 ``记录机制`` ，对采用QoS1服务质量的报文必须保证到达一次，当发布的主题（qos1、qos2都适用）没有被服务器收到时会自动重发，而对QoS2服务质量的报文保证有且只有处理一次（如果不相信它稳定性的同学可以自己去修改源码，专门为QoS2服务质量去做测试，故意不回复 ``PUBREC`` 包，让服务器重发QoS2报文，且看看客户端是否有且只有处理一次），而对于掉线重连的稳定性，这种则是 **最最最基本操作** 了，没啥好说的，在自动重连后还会 **自动重新订阅主题** ，保证主题不会丢失，因此在测试中 **稳定性极好** 。

-  **轻量级** ：整个代码工程极其简单，不使用mbedtls情况下，占用资源极少，作者曾使用esp8266模组与云端通信，整个工程代码消耗的RAM不足15k（包括系统占用的开销，对数据的处理开销，而此次还是未优化的情况下，还依旧完美保留了掉线重连的稳定性，但是对应qos1、qos2服务质量的报文则未做测试，因为STM32F103C8T6芯片资源实在是太少了，折腾不起）。

-  **无缝衔接mbedtls加密传输** ，让网络传输更加安全，而且接口层完全不需要用户理会，无论是否加密，mqttclient对用户提供的API接口是 **没有变化** 的，这就很好的兼容了一套代应用层的码可以加密传输也可以不加密传输。

-  **拥有极简的API接口** ，总的来说，mqttclient的配置都有默认值，基本无需配置都能使用的，也可以随意配置，对配置都有健壮性检测，这样子设计的API接口也是非常简单。

-  **有非常好的代码风格与思想** ：整个代码采用分层式设计，代码实现采用异步处理的思想，降低耦合，提高性能，具体体现在什么地方呢？很简单，目前市面上很多MQTT客户端发布主题都是要阻塞等待ack，这是非常暴力的行为，阻塞当前线程等待服务器的应答，那如果我想要发送数据怎么办，或者我要重复检测数据怎么办，你可能会说，指定阻塞时间等待，那如果网络延迟，ack迟迟不来，我就白等了吗，对于qos1、qos2的服务质量怎么办，所以说这种还是要异步处理的思想，我发布主题，那我发布出去就好了，不需要等待，对于qos1、qos2服务质量的MQTT报文，如果服务器没收到，那我重发就可以，这种重发也是异步的处理，完全不会阻塞当前线程。

-  **MQTT协议支持主题通配符 ``“#”、“+”`` 。**

-  **订阅的主题与消息处理完全分离** ，让编程逻辑更加简单易用，用户无需理会错综复杂的逻辑关系。

-  **mqttclient内部已实现保活处理机制** ，无需用户过多关心理会，用户只需专心处理应用功能即可。

-  **无缝衔接salof** ：它是一个同步异步日志输出框架，在空闲时候输出对应的日志信息，也可以将信息写入flash中保存，方便调试。

-  **不对外产生依赖。**

-  **使用了著名的 paho mqtt 库** 作为mqtt协议的封包解包，稳定性极佳。

mqttclient整体架构
------------------

拥有非常明确的分层架构。

.. figure:: ./media/mqttclient.png
   :alt: 整体架构

   整体架构

-  在架构的最上方是API函数接口，实现了客户端的初始化、释放、连接服务器、断开连接、订阅主题、取消订阅主题、发布消息等函数接口。

-  mqtt client使用了著名的paho mqtt库。

-  采用异步处理的机制去管理所有的ack，它在发送报文的时候不用等待服务器的应答，只是记录下来，在收到服务器的ack后，取消这个记录，效率极高；而在发送mqtt报文（QoS1/QoS2）的时候没有收到服务器的应答时，将重发该报文。

-  内部实现了一个mqtt
   yield线程，统一处理所有的内容，比如超时的处理、ack报文的处理、收到来自服务器的publish报文，此时会去调用回调函数告知用户收到的数据，发布释放、发布完成报文的处理、心跳报文（保持活性），当与服务器断开连接时需要尝试重连、重新订阅主题，重新发送报文或者应答等。

-  报文的处理，读写报文、解码mqtt报文、设置报文（dup）、销毁报文等操作。

-  network是网络组件，它可以自动选择数据通道，如果是加密方式则通过tls进行数据传输，而tls可以选择mbedtls作为加密后端；也可以是tcp直连方式，最终都是通过tcp传输的。

-  platform是平台抽象层，封装了不同系统的东西，比如socke或者AT，线程、时间、互斥锁、内存管理，这些是与系统打交道的，也是跨平台必要的封装。

-  最右边的则是通用的内容，list的处理、日志库、错误处理、软件随机数发生器等。

**目前已实现了Linux、TencentOS
tiny、FreeRTOS、RT-Thread平台（已做成软件包，名字为 ``kawaii-mqtt`` ），除此之外TencentOS
tiny的AT框架亦可以使用（RAM消耗不足15K），并且稳定性极好！**

发布的版本信息
--------------

+------------+-------------------------------------------------+
| 发布版本   | 描述                                            |
+============+=================================================+
| [v1.0.0]   | 初次发布，完成基本框架及其稳定性验证            |
+------------+-------------------------------------------------+
| [v1.0.1]   | 修复主动与服务器断开连接时的逻辑处理            |
+------------+-------------------------------------------------+
| [v1.0.2]   | 添加新特性——拦截器，修复一些小bug               |
+------------+-------------------------------------------------+
| [v1.0.3]   | 避免造成全局污染修改了log、list相关函数的命名   |
+------------+-------------------------------------------------+
| [v1.0.4]   | 重新调整了network结构与mbedtls数据通道          |
+------------+-------------------------------------------------+

版权和许可
----------

mqttclient 遵循 `Apache License
v2.0 <https://github.com/jiejieTop/mqttclient/blob/master/LICENSE>`__
开源协议。鼓励代码共享和尊重原作者的著作权，可以自由的使用、修改源代码，也可以将修改后的代码作为开源或闭源软件发布。

在接下来的文章我们将使用该库去连接百度云、阿里云、onenet等云平台。
